{"version":3,"file":"static/js/436.394d4c3b.chunk.js","mappings":"0PAEaA,EAAWC,EAAAA,GAAAA,GAAH,wYAgBRC,EAASD,EAAAA,GAAAA,GAAH,0qB,SCmBnB,EA/Ba,WACX,IAAQE,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAwBE,EAAAA,EAAAA,UAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,KAMA,IAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaN,GAAIO,KAAKH,EACvB,GAAE,CAACJ,IAECG,EAAKA,KAAV,CAIA,IAAMK,EAAWL,EAAKA,KAAKM,KAAI,YAA0C,IAAvCT,EAAsC,EAAtCA,GAAIU,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,cAClD,OACE,UAACZ,EAAD,YACE,gBACEa,MAAM,QACNC,IACEH,EAAY,yCAC0BA,GAClCI,EAENC,IAAKJ,KAEP,uBAAIA,MAVOX,EAahB,IACD,OAAO,SAACH,EAAD,UAAWW,GAlBjB,CAmBF,C","sources":["pages/moviesDetails/Cast/CastStyled.js","pages/moviesDetails/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  margin: 0;\n  padding: 12px 30px 55px;\n  display: grid;\n  gap: 25px;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  list-style: none;\n\n  @media screen and (min-width: 470px) {\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;\n  }\n  @media screen and (min-width: 768px) {\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;    \n  }\n`;\n\nexport const ItemLi = styled.li`\n  padding: 0;\n  margin: 0;\n  border: 1px solid #483d8b;\n  padding-bottom: 13px;\n  border-radius: 8px;\n  overflow: hidden;\n  background-color: #483d8b;\n  text-align: center;\n\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  & p {\n    text-decoration: none;\n    color: #b0c4de;\n  }\n  &:hover {\n    box-shadow: rgba(0, 255, 0, 0.4) -5px 5px, rgba(0, 255, 0, 0.3) -10px 10px,\n      rgba(0, 255, 0, 0.2) -15px 15px;\n\n    transform: scale(1.05);\n    border: 1px solid rgba(0, 255, 0, 1);\n    cursor: pointer;\n    p {\n      text-decoration: none;\n      color: #00ff00;\n    }\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport noPhoto from 'images/no-image-icon.png';\nimport { getMovieCast } from 'components/API/Api';\nimport { CastList, ItemLi } from 'pages/moviesDetails/Cast/CastStyled';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [cast, setCast] = useState(0);\n\n  useEffect(() => {\n    getMovieCast(id).then(setCast);\n  }, [id]);\n\n  if (!cast.cast) {\n    return;\n  }\n\n  const elements = cast.cast.map(({ id, profile_path, original_name }) => {\n    return (\n      <ItemLi key={id}>\n        <img\n          width=\"100px\"\n          src={\n            profile_path\n              ? `https://image.tmdb.org/t/p/w500${profile_path}`\n              : noPhoto\n          }\n          alt={original_name}\n        />\n        <p>{original_name}</p>\n      </ItemLi>\n    );\n  });\n  return <CastList>{elements}</CastList>;\n};\n\nexport default Cast;\n"],"names":["CastList","styled","ItemLi","id","useParams","useState","cast","setCast","useEffect","getMovieCast","then","elements","map","profile_path","original_name","width","src","noPhoto","alt"],"sourceRoot":""}